@page "/map"
@rendermode InteractiveServer

<PageTitle>Map - Blazor UI</PageTitle>

<div class="page-header">
    <Breadcrumb Items="@breadcrumbItems" />
    <h1>Map View</h1>
    <p>Track locations and geographical data</p>
</div>

<div class="map-stats-grid">
    <Card Style="min-width: 200px;">
        <CardHeader>
            <h3>Total Locations</h3>
        </CardHeader>
        <CardContent>
            <p class="stat-value">@locations.Count</p>
            <p class="stat-label">Active markers</p>
        </CardContent>
    </Card>

    <Card Style="min-width: 200px;">
        <CardHeader>
            <h3>Countries</h3>
        </CardHeader>
        <CardContent>
            <p class="stat-value">@countries.Count</p>
            <p class="stat-label">Regions covered</p>
        </CardContent>
    </Card>

    <Card Style="min-width: 200px;">
        <CardHeader>
            <h3>Active Today</h3>
        </CardHeader>
        <CardContent>
            <p class="stat-value">@activeLocations</p>
            <p class="stat-label">Recent activity</p>
        </CardContent>
    </Card>

    <Card Style="min-width: 200px;">
        <CardHeader>
            <h3>Coverage</h3>
        </CardHeader>
        <CardContent>
            <p class="stat-value">@coverage%</p>
            <p class="stat-label">Global reach</p>
        </CardContent>
    </Card>
</div>

<div class="map-container-section">
    <Card>
        <CardHeader>
            <div class="map-header">
                <h3>Global Locations Map</h3>
                <div class="map-controls">
                    <Button Icon="my_location" Type="ButtonType.Secondary" Size="ButtonSize.Small" Tooltip="Center Map" OnClick="CenterMap" />
                    <Button Icon="layers" Type="ButtonType.Secondary" Size="ButtonSize.Small" Tooltip="Toggle Layers" OnClick="ToggleLayers" />
                </div>
            </div>
        </CardHeader>
        <CardContent>
            <div class="map-container">
                <div class="map-canvas">
                    <!-- Map visualization with CSS -->
                    <div class="map-background">
                        @foreach (var location in locations)
                        {
                            <div class="map-marker" 
                                 style="left: @(location.X)%; top: @(location.Y)%;"
                                 @onclick="() => SelectLocation(location)">
                                <div class="marker-dot @(selectedLocation?.Name == location.Name ? "selected" : "")"></div>
                                <div class="marker-ripple"></div>
                                @if (selectedLocation?.Name == location.Name)
                                {
                                    <div class="marker-popup">
                                        <div class="popup-content">
                                            <strong>@location.Name</strong>
                                            <p>@location.Country</p>
                                            <p class="popup-stats">@location.Users users</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </CardContent>
    </Card>
</div>

<div class="locations-list-section">
    <Card>
        <CardHeader>
            <h3>Location Details</h3>
        </CardHeader>
        <CardContent>
            <DataTable Items="locations" TItem="LocationData">
                <DataColumns>
                    <DataTableColumn TItem="LocationData" Header="Location" Property="x => x.Name" />
                    <DataTableColumn TItem="LocationData" Header="Country" Property="x => x.Country" />
                    <DataTableColumn TItem="LocationData" Header="Users" Property="x => x.Users" />
                    <DataTableColumn TItem="LocationData" Header="Status" Property="x => x.Status" />
                </DataColumns>
            </DataTable>
        </CardContent>
    </Card>
</div>

@code {
    private List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel> breadcrumbItems = new();
    private List<LocationData> locations = new();
    private LocationData? selectedLocation = null;
    private HashSet<string> countries = new();
    private int activeLocations = 0;
    private int coverage = 0;

    protected override void OnInitialized()
    {
        breadcrumbItems = new List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel>
        {
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Home") { Url = "/" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Map") { Url = "/map" }
        };

        locations = new List<LocationData>
        {
            new LocationData { Name = "San Francisco", Country = "USA", X = 12, Y = 35, Users = 1250, Status = "Active" },
            new LocationData { Name = "New York", Country = "USA", X = 22, Y = 32, Users = 2340, Status = "Active" },
            new LocationData { Name = "London", Country = "UK", X = 48, Y = 28, Users = 1890, Status = "Active" },
            new LocationData { Name = "Paris", Country = "France", X = 50, Y = 30, Users = 1560, Status = "Active" },
            new LocationData { Name = "Berlin", Country = "Germany", X = 52, Y = 27, Users = 1120, Status = "Active" },
            new LocationData { Name = "Tokyo", Country = "Japan", X = 85, Y = 36, Users = 3450, Status = "Active" },
            new LocationData { Name = "Singapore", Country = "Singapore", X = 78, Y = 60, Users = 980, Status = "Active" },
            new LocationData { Name = "Sydney", Country = "Australia", X = 88, Y = 75, Users = 760, Status = "Active" },
            new LocationData { Name = "Mumbai", Country = "India", X = 68, Y = 50, Users = 2100, Status = "Active" },
            new LocationData { Name = "SÃ£o Paulo", Country = "Brazil", X = 32, Y = 70, Users = 1340, Status = "Active" }
        };

        countries = locations.Select(l => l.Country).ToHashSet();
        activeLocations = locations.Count(l => l.Status == "Active");
        coverage = 78; // Example percentage
    }

    private void SelectLocation(LocationData location)
    {
        selectedLocation = location;
    }

    private void CenterMap()
    {
        selectedLocation = null;
    }

    private void ToggleLayers()
    {
        // Toggle layers functionality
    }

    public class LocationData
    {
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public double X { get; set; }
        public double Y { get; set; }
        public int Users { get; set; }
        public string Status { get; set; } = "";
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: #1e293b;
    }

    .page-header p {
        color: #64748b;
        margin: 0;
    }

    .map-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1e293b;
        margin: 0.5rem 0 0.25rem 0;
    }

    .stat-label {
        font-size: 0.875rem;
        color: #64748b;
        margin: 0;
    }

    .map-container-section {
        margin-bottom: 2rem;
    }

    .map-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .map-controls {
        display: flex;
        gap: 0.5rem;
    }

    .map-container {
        width: 100%;
        height: 500px;
        position: relative;
        overflow: hidden;
        border-radius: 0.5rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .map-canvas {
        width: 100%;
        height: 100%;
        position: relative;
    }

    .map-background {
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 20% 30%, rgba(255,255,255,0.15) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, rgba(255,255,255,0.1) 0%, transparent 50%),
            linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        position: relative;
        overflow: hidden;
    }

    .map-background::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            repeating-linear-gradient(0deg, transparent, transparent 50px, rgba(255,255,255,0.05) 50px, rgba(255,255,255,0.05) 51px),
            repeating-linear-gradient(90deg, transparent, transparent 50px, rgba(255,255,255,0.05) 50px, rgba(255,255,255,0.05) 51px);
        opacity: 0.3;
    }

    .map-marker {
        position: absolute;
        transform: translate(-50%, -50%);
        cursor: pointer;
        z-index: 10;
    }

    .marker-dot {
        width: 16px;
        height: 16px;
        background: #ffffff;
        border: 3px solid #8b5cf6;
        border-radius: 50%;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        transition: all 0.3s ease;
        position: relative;
        z-index: 2;
    }

    .marker-dot:hover,
    .marker-dot.selected {
        width: 20px;
        height: 20px;
        background: #8b5cf6;
        border-color: #ffffff;
        box-shadow: 0 4px 16px rgba(139,92,246,0.6);
    }

    .marker-ripple {
        position: absolute;
        width: 40px;
        height: 40px;
        border: 2px solid rgba(255,255,255,0.6);
        border-radius: 50%;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        animation: ripple 2s infinite ease-out;
        pointer-events: none;
    }

    @@keyframes ripple {
        0% {
            width: 20px;
            height: 20px;
            opacity: 1;
        }
        100% {
            width: 60px;
            height: 60px;
            opacity: 0;
        }
    }

    .marker-popup {
        position: absolute;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        border-radius: 8px;
        padding: 0;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        white-space: nowrap;
        z-index: 1000;
        animation: popupAppear 0.3s ease-out;
    }

    @@keyframes popupAppear {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    .marker-popup::after {
        content: '';
        position: absolute;
        bottom: -8px;
        left: 50%;
        transform: translateX(-50%);
        width: 0;
        height: 0;
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        border-top: 8px solid white;
    }

    .popup-content {
        padding: 12px 16px;
    }

    .popup-content strong {
        display: block;
        font-size: 1rem;
        color: #1e293b;
        margin-bottom: 4px;
    }

    .popup-content p {
        font-size: 0.875rem;
        color: #64748b;
        margin: 2px 0;
    }

    .popup-stats {
        font-weight: 600;
        color: #8b5cf6;
    }

    .locations-list-section {
        margin-bottom: 2rem;
    }

    @@media (max-width: 768px) {
        .map-container {
            height: 400px;
        }
        
        .map-stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
    }
</style>
