@page "/todos"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Services
@inject IJsonPlaceholderService JsonPlaceholderService

<PageTitle>Tasks - Blazor UI</PageTitle>

<div class="page-header">
    <Breadcrumb Items="@breadcrumbItems" />
    <div class="header-content">
        <div>
            <h1>Tasks</h1>
            <p>Manage and track your tasks efficiently</p>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="loading">Loading tasks...</div>
}
else if (todos.Count == 0)
{
    <Card>
        <CardContent>
            <p>No tasks found.</p>
        </CardContent>
    </Card>
}
else
{
    <Card>
        <CardHeader>
            <div class="table-header">
                <h3>Task List</h3>
                <div class="filter-group">
                    <button class="filter-btn @(selectedFilter == "all" ? "active" : "")" @onclick="@(() => SetFilter("all"))">
                        All (@todos.Count)
                    </button>
                    <button class="filter-btn @(selectedFilter == "todo" ? "active" : "")" @onclick="@(() => SetFilter("todo"))">
                        Todo (@todos.Count(t => t.Status == "todo"))
                    </button>
                    <button class="filter-btn @(selectedFilter == "in progress" ? "active" : "")" @onclick="@(() => SetFilter("in progress"))">
                        In Progress (@todos.Count(t => t.Status == "in progress"))
                    </button>
                    <button class="filter-btn @(selectedFilter == "done" ? "active" : "")" @onclick="@(() => SetFilter("done"))">
                        Done (@todos.Count(t => t.Status == "done"))
                    </button>
                    <button class="filter-btn @(selectedFilter == "canceled" ? "active" : "")" @onclick="@(() => SetFilter("canceled"))">
                        Canceled (@todos.Count(t => t.Status == "canceled"))
                    </button>
                </div>
            </div>
        </CardHeader>
        <CardContent>
            <DataTable Items="filteredTodos" TItem="Todo">
                <DataColumns Context="task">
                    <DataTableColumn TItem="Todo" Header="">
                        <Template>
                            <input type="checkbox" class="task-checkbox" />
                        </Template>
                    </DataTableColumn>
                    <DataTableColumn TItem="Todo" Header="Task" Property="x => x.Id">
                        <Template>
                            <span class="task-id">TASK-@task.Id</span>
                        </Template>
                    </DataTableColumn>
                    <DataTableColumn TItem="Todo" Header="Title">
                        <Template>
                            <div class="task-title-container">
                                <span class="task-title">@task.Title</span>
                                <span class="task-label label-@task.Label">@task.Label</span>
                            </div>
                        </Template>
                    </DataTableColumn>
                    <DataTableColumn TItem="Todo" Header="Status">
                        <Template>
                            <span class="status-badge status-@task.Status.ToLower().Replace(" ", "-")">
                                @if (task.Status == "done")
                                {
                                    <Icon Name="check_circle" Size="14px" />
                                }
                                else if (task.Status == "in progress")
                                {
                                    <Icon Name="schedule" Size="14px" />
                                }
                                else if (task.Status == "canceled")
                                {
                                    <Icon Name="cancel" Size="14px" />
                                }
                                else
                                {
                                    <Icon Name="radio_button_unchecked" Size="14px" />
                                }
                                @task.Status
                            </span>
                        </Template>
                    </DataTableColumn>
                    <DataTableColumn TItem="Todo" Header="Priority">
                        <Template>
                            <span class="priority-badge priority-@task.Priority">@task.Priority</span>
                        </Template>
                    </DataTableColumn>
                </DataColumns>
            </DataTable>
        </CardContent>
    </Card>
}

@code {
    private List<Todo> todos = new();
    private List<Todo> filteredTodos = new();
    private bool isLoading = true;
    private string selectedFilter = "all";
    private List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel> breadcrumbItems = new();

    private string[] statuses = new[] { "todo", "in progress", "done", "canceled" };
    private string[] priorities = new[] { "low", "medium", "high" };
    private string[] labels = new[] { "bug", "feature", "documentation", "enhancement" };

    protected override void OnInitialized()
    {
        breadcrumbItems = new List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel>
        {
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Home") { Url = "/" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Tasks") { Url = "/todos" }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            todos = await JsonPlaceholderService.GetTodosAsync();
            
            // Enrich todos with status and priority based on their properties
            var random = new Random(42); // Fixed seed for consistency
            foreach (var todo in todos)
            {
                if (todo.Completed)
                {
                    todo.Status = "done";
                }
                else
                {
                    // Distribute remaining tasks across other statuses
                    var statusIndex = random.Next(3);
                    todo.Status = statusIndex switch
                    {
                        0 => "todo",
                        1 => "in progress",
                        _ => "canceled"
                    };
                }
                
                // Assign priorities
                var priorityIndex = random.Next(3);
                todo.Priority = priorities[priorityIndex];
                
                // Assign labels
                var labelIndex = random.Next(labels.Length);
                todo.Label = labels[labelIndex];
            }
            
            filteredTodos = todos.Take(50).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading todos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetFilter(string filter)
    {
        selectedFilter = filter;
        if (filter == "all")
        {
            filteredTodos = todos.Take(50).ToList();
        }
        else
        {
            filteredTodos = todos.Where(t => t.Status == filter).Take(50).ToList();
        }
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: #1e293b;
    }

    .page-header p {
        color: #64748b;
        margin: 0;
    }

    .loading {
        text-align: center;
        padding: 2rem;
        color: #64748b;
    }

    .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .table-header h3 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #1e293b;
    }

    .filter-group {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 0.375rem 0.75rem;
        border: 1px solid #e2e8f0;
        background: white;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        color: #64748b;
        cursor: pointer;
        transition: all 0.2s;
    }

    .filter-btn:hover {
        background: #f8fafc;
        border-color: #cbd5e1;
    }

    .filter-btn.active {
        background: #1e293b;
        color: white;
        border-color: #1e293b;
    }

    .task-checkbox {
        cursor: pointer;
        width: 16px;
        height: 16px;
    }

    .task-id {
        font-family: monospace;
        font-size: 0.875rem;
        color: #64748b;
        font-weight: 500;
    }

    .task-title-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .task-title {
        color: #1e293b;
        font-weight: 500;
    }

    .task-label {
        display: inline-block;
        padding: 0.125rem 0.5rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .label-bug {
        background: #fee2e2;
        color: #991b1b;
    }

    .label-feature {
        background: #dbeafe;
        color: #1e40af;
    }

    .label-documentation {
        background: #e0e7ff;
        color: #4338ca;
    }

    .label-enhancement {
        background: #dcfce7;
        color: #166534;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: capitalize;
    }

    .status-badge.status-todo {
        background: #f1f5f9;
        color: #475569;
    }

    .status-badge.status-in-progress {
        background: #fef3c7;
        color: #92400e;
    }

    .status-badge.status-done {
        background: #dcfce7;
        color: #166534;
    }

    .status-badge.status-canceled {
        background: #f1f5f9;
        color: #64748b;
        text-decoration: line-through;
    }

    .priority-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: capitalize;
    }

    .priority-badge.priority-low {
        background: #dbeafe;
        color: #1e40af;
    }

    .priority-badge.priority-medium {
        background: #fef3c7;
        color: #92400e;
    }

    .priority-badge.priority-high {
        background: #fee2e2;
        color: #991b1b;
    }
</style>
