@page "/kanban"
@rendermode InteractiveServer
@inject IKanbanService KanbanService
@using BlazorApp.Models
@using BlazorApp.Services

<PageTitle>Kanban Board - Blazor UI</PageTitle>

<div class="page-header">
    <Breadcrumb Items="@breadcrumbItems" />
    <div class="flex-row flex" style="justify-content: space-between; align-items: center;">
        <div>
            <h1>Kanban Board</h1>
            <p>Organize and track your tasks efficiently</p>
        </div>
        <Button Text="New Task" Icon="add" Type="ButtonType.Primary" OnClick="ShowNewCardDialog" />
    </div>
</div>

@if (isLoading)
{
    <div class="loading-container">
        <p>Loading kanban board...</p>
    </div>
}
else
{
    <div class="kanban-board">
        @foreach (var column in columns)
        {
            <div class="kanban-column">
                <div class="column-header">
                    <div class="column-title">
                        <Icon Name="@GetColumnIcon(column.Key)" Size="20px" />
                        <h3>@column.Value</h3>
                        <Badge Text="@GetCardCount(column.Key).ToString()" Type="BadgeType.Secondary" />
                    </div>
                </div>
                
                <div class="kanban-cards" ondragover="event.preventDefault()" 
                     @ondrop="@(() => HandleDrop(column.Key))">
                    @foreach (var card in GetCardsByStatus(column.Key))
                    {
                        <div class="kanban-card" draggable="true" 
                             @ondragstart="@(() => HandleDragStart(card))"
                             @onclick="@(() => SelectCard(card))">
                            <div class="card-header-row">
                                <Badge Text="@card.Priority" Type="@GetPriorityBadgeType(card.Priority)" />
                                <Icon Name="more_vert" Size="16px" Class="card-menu-icon" />
                            </div>
                            
                            <h4 class="card-title">@card.Title</h4>
                            <p class="card-description">@card.Description</p>
                            
                            @if (card.Tags.Any())
                            {
                                <div class="card-tags">
                                    @foreach (var tag in card.Tags)
                                    {
                                        <span class="card-tag">@tag</span>
                                    }
                                </div>
                            }
                            
                            <div class="card-footer">
                                <div class="card-assignee">
                                    <Avatar Name="@card.AssignedTo" />
                                    <span class="assignee-name">@GetShortName(card.AssignedTo)</span>
                                </div>
                                @if (card.DueDate.HasValue)
                                {
                                    <div class="card-due-date @GetDueDateClass(card.DueDate.Value)">
                                        <Icon Name="calendar_today" Size="14px" />
                                        <span>@card.DueDate.Value.ToString("MMM dd")</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @if (!GetCardsByStatus(column.Key).Any())
                    {
                        <div class="empty-column">
                            <Icon Name="inbox" Size="32px" Class="empty-icon" />
                            <p>No tasks</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<!-- Card Detail Dialog -->
@if (showCardDialog && selectedCard != null)
{
    <div class="dialog-overlay" @onclick="@(() => showCardDialog = false)">
        <div class="dialog-container" @onclick:stopPropagation="true">
            <div class="dialog-header">
                <h2>Task Details</h2>
                <Icon Name="close" Size="20px" OnClick="@(() => showCardDialog = false)" />
            </div>
            <div class="dialog-content">
                <div class="form-group">
                    <Label Text="Title" />
                    <Input @bind-Value="selectedCard.Title" TItem="string" Placeholder="Task title" />
                </div>
                
                <div class="form-group">
                    <Label Text="Description" />
                    <textarea class="form-control" @bind="selectedCard.Description" 
                              rows="4" placeholder="Task description"></textarea>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <Label Text="Status" />
                        <select class="form-control" @bind="selectedCard.Status">
                            @foreach (var col in columns)
                            {
                                <option value="@col.Key">@col.Value</option>
                            }
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <Label Text="Priority" />
                        <select class="form-control" @bind="selectedCard.Priority">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <Label Text="Assigned To" />
                    <Input @bind-Value="selectedCard.AssignedTo" TItem="string" Placeholder="Assignee name" />
                </div>
                
                <div class="form-group">
                    <Label Text="Due Date" />
                    <input type="date" class="form-control" 
                           value="@(selectedCard.DueDate?.ToString("yyyy-MM-dd"))"
                           @onchange="@(e => selectedCard.DueDate = DateTime.Parse(e.Value?.ToString() ?? DateTime.Now.ToString()))" />
                </div>
            </div>
            <div class="dialog-footer">
                <Button Text="Cancel" Type="ButtonType.Secondary" OnClick="@(() => showCardDialog = false)" />
                @if (isNewCard)
                {
                    <Button Text="Create" Type="ButtonType.Primary" OnClick="CreateCard" />
                }
                else
                {
                    <Button Text="Delete" Type="ButtonType.Destructive" OnClick="DeleteCard" />
                    <Button Text="Save" Type="ButtonType.Primary" OnClick="UpdateCard" />
                }
            </div>
        </div>
    </div>
}

<style>
    .kanban-board {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        padding: 1rem 0;
    }
    
    .kanban-column {
        background: var(--card-background, #fff);
        border-radius: 8px;
        border: 1px solid var(--border-color, #e5e7eb);
        min-height: 400px;
        display: flex;
        flex-direction: column;
    }
    
    .column-header {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color, #e5e7eb);
    }
    
    .column-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .column-title h3 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        flex: 1;
    }
    
    .kanban-cards {
        flex: 1;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        overflow-y: auto;
        max-height: calc(100vh - 300px);
    }
    
    .kanban-card {
        background: var(--card-background, #fff);
        border: 1px solid var(--border-color, #e5e7eb);
        border-radius: 6px;
        padding: 0.875rem;
        cursor: move;
        transition: all 0.2s;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    .kanban-card:hover {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }
    
    .card-header-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }
    
    .card-menu-icon {
        cursor: pointer;
        opacity: 0.5;
    }
    
    .card-menu-icon:hover {
        opacity: 1;
    }
    
    .card-title {
        margin: 0 0 0.5rem 0;
        font-size: 0.9375rem;
        font-weight: 600;
        color: var(--text-primary);
    }
    
    .card-description {
        margin: 0 0 0.75rem 0;
        font-size: 0.875rem;
        color: var(--text-secondary);
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .card-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.375rem;
        margin-bottom: 0.75rem;
    }
    
    .card-tag {
        font-size: 0.75rem;
        padding: 0.125rem 0.5rem;
        background: var(--tag-background, #f3f4f6);
        border-radius: 4px;
        color: var(--tag-text, #6b7280);
    }
    
    .card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 0.5rem;
        border-top: 1px solid var(--border-color, #e5e7eb);
    }
    
    .card-assignee {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .assignee-name {
        font-size: 0.8125rem;
        color: var(--text-secondary);
    }
    
    .card-due-date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.75rem;
        color: var(--text-secondary);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        background: var(--background-secondary);
    }
    
    .card-due-date.overdue {
        color: #dc2626;
        background: #fee2e2;
    }
    
    .card-due-date.due-soon {
        color: #f59e0b;
        background: #fef3c7;
    }
    
    .empty-column {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem 1rem;
        color: var(--text-muted);
    }
    
    .empty-icon {
        opacity: 0.3;
        margin-bottom: 0.5rem;
    }
    
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 4rem;
    }
    
    .dialog-content {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }
    
    .form-control {
        padding: 0.5rem 0.75rem;
        border: 1px solid var(--border-color, #e5e7eb);
        border-radius: 4px;
        font-size: 0.875rem;
    }
    
    textarea.form-control {
        resize: vertical;
        font-family: inherit;
    }

    /* Dialog Styles */
    .dialog-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .dialog-container {
        background: var(--card-background, #fff);
        border-radius: 8px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    }

    .dialog-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color, #e5e7eb);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .dialog-header h2 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .dialog-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid var(--border-color, #e5e7eb);
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
    }
</style>

@code {
    private List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel> breadcrumbItems = new();
    private List<KanbanCard> cards = new();
    private Dictionary<string, string> columns = new()
    {
        { "todo", "To Do" },
        { "in-progress", "In Progress" },
        { "review", "Review" },
        { "done", "Done" }
    };
    
    private bool isLoading = true;
    private bool showCardDialog = false;
    private bool isNewCard = false;
    private KanbanCard? selectedCard = null;
    private KanbanCard? draggedCard = null;

    protected override async Task OnInitializedAsync()
    {
        breadcrumbItems = new List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel>
        {
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Home") { Url = "/" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Kanban Board") { Url = "/kanban" }
        };
        
        await LoadCards();
    }

    private async Task LoadCards()
    {
        isLoading = true;
        cards = await KanbanService.GetCardsAsync();
        isLoading = false;
        StateHasChanged();
    }

    private List<KanbanCard> GetCardsByStatus(string status)
    {
        return cards.Where(c => c.Status == status).ToList();
    }

    private int GetCardCount(string status)
    {
        return cards.Count(c => c.Status == status);
    }

    private string GetColumnIcon(string status)
    {
        return status switch
        {
            "todo" => "list",
            "in-progress" => "pending",
            "review" => "rate_review",
            "done" => "check_circle",
            _ => "label"
        };
    }

    private BadgeType GetPriorityBadgeType(string priority)
    {
        return priority switch
        {
            "high" => BadgeType.Destructive,
            "medium" => BadgeType.Warning,
            "low" => BadgeType.Secondary,
            _ => BadgeType.Default
        };
    }

    private string GetDueDateClass(DateTime dueDate)
    {
        var daysUntilDue = (dueDate - DateTime.Now).Days;
        if (daysUntilDue < 0) return "overdue";
        if (daysUntilDue <= 3) return "due-soon";
        return "";
    }

    private string GetShortName(string fullName)
    {
        var parts = fullName.Split(' ');
        return parts.Length > 1 ? $"{parts[0]} {parts[1][0]}." : fullName;
    }

    private void HandleDragStart(KanbanCard card)
    {
        draggedCard = card;
    }

    private async Task HandleDrop(string newStatus)
    {
        if (draggedCard != null && draggedCard.Status != newStatus)
        {
            await KanbanService.UpdateCardStatusAsync(draggedCard.Id, newStatus);
            await LoadCards();
        }
        draggedCard = null;
    }

    private void ShowNewCardDialog()
    {
        isNewCard = true;
        selectedCard = new KanbanCard
        {
            Status = "todo",
            Priority = "medium",
            CreatedDate = DateTime.Now
        };
        showCardDialog = true;
    }

    private void SelectCard(KanbanCard card)
    {
        isNewCard = false;
        selectedCard = card;
        showCardDialog = true;
    }

    private async Task CreateCard()
    {
        if (selectedCard != null)
        {
            await KanbanService.CreateCardAsync(selectedCard);
            await LoadCards();
            showCardDialog = false;
        }
    }

    private async Task UpdateCard()
    {
        if (selectedCard != null)
        {
            await KanbanService.UpdateCardAsync(selectedCard);
            await LoadCards();
            showCardDialog = false;
        }
    }

    private async Task DeleteCard()
    {
        if (selectedCard != null)
        {
            await KanbanService.DeleteCardAsync(selectedCard.Id);
            await LoadCards();
            showCardDialog = false;
        }
    }
}
