@page "/kanban"
@rendermode InteractiveServer
@using BlazorApp.Models
@using System.Text.Json

<PageTitle>Kanban Board - Blazor UI</PageTitle>

<div class="page-header">
    <div class="header-content">
        <div>
            <h1>Kanban Board</h1>
            <p>Manage tasks with drag-and-drop columns</p>
        </div>
        <Button Icon="settings" Type="ButtonType.Secondary" OnClick="ToggleSettings">
            Display Settings
        </Button>
    </div>
</div>

@if (showSettings)
{
    <Card Style="margin-bottom: 1.5rem;">
        <CardHeader>
            <div class="settings-header">
                <h3>Display Configuration</h3>
                <Button Icon="close" Type="ButtonType.Ghost" Size="ButtonSize.Small" OnClick="ToggleSettings" />
            </div>
        </CardHeader>
        <CardContent>
            <div class="settings-grid">
                <div class="setting-group">
                    <label class="setting-label">Column Visibility</label>
                    <div class="checkbox-group">
                        @foreach (var status in statuses)
                        {
                            <label class="checkbox-label">
                                <input type="checkbox" 
                                       checked="@visibleColumns.Contains(status)" 
                                       @onchange="@((e) => ToggleColumn(status, e))" />
                                <span>@status</span>
                            </label>
                        }
                    </div>
                </div>
                
                <div class="setting-group">
                    <label class="setting-label">Color Theme</label>
                    <div class="radio-group">
                        @foreach (var theme in themes)
                        {
                            <label class="radio-label">
                                <input type="radio" 
                                       name="theme" 
                                       value="@theme" 
                                       checked="@(selectedTheme == theme)"
                                       @onchange="@(() => ChangeTheme(theme))" />
                                <span>@theme</span>
                            </label>
                        }
                    </div>
                </div>
                
                <div class="setting-group">
                    <label class="setting-label">Card Density</label>
                    <div class="radio-group">
                        @foreach (var density in densities)
                        {
                            <label class="radio-label">
                                <input type="radio" 
                                       name="density" 
                                       value="@density" 
                                       checked="@(selectedDensity == density)"
                                       @onchange="@(() => ChangeDensity(density))" />
                                <span>@density</span>
                            </label>
                        }
                    </div>
                </div>
                
                <div class="setting-group">
                    <label class="setting-label">Sort By</label>
                    <div class="radio-group">
                        @foreach (var sort in sortOptions)
                        {
                            <label class="radio-label">
                                <input type="radio" 
                                       name="sort" 
                                       value="@sort" 
                                       checked="@(selectedSort == sort)"
                                       @onchange="@(() => ChangeSort(sort))" />
                                <span>@sort</span>
                            </label>
                        }
                    </div>
                </div>
                
                <div class="setting-group">
                    <label class="setting-label">Show Card Details</label>
                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" checked="@showAssignee" @onchange="@((e) => showAssignee = (bool)e.Value!)" />
                            <span>Assignee</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" checked="@showDueDate" @onchange="@((e) => showDueDate = (bool)e.Value!)" />
                            <span>Due Date</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" checked="@showTags" @onchange="@((e) => showTags = (bool)e.Value!)" />
                            <span>Tags</span>
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" checked="@showPriority" @onchange="@((e) => showPriority = (bool)e.Value!)" />
                            <span>Priority</span>
                        </label>
                    </div>
                </div>
            </div>
        </CardContent>
    </Card>
}

<div class="kanban-board theme-@selectedTheme density-@selectedDensity">
    @foreach (var status in visibleColumns)
    {
        <div class="kanban-column">
            <div class="column-header">
                <div class="column-title">
                    <Icon Name="@GetStatusIcon(status)" Size="20px" />
                    <h3>@status</h3>
                    <span class="card-count">@GetFilteredCards(status).Count()</span>
                </div>
                <Button Icon="add" Type="ButtonType.Ghost" Size="ButtonSize.Small" />
            </div>
            <div class="column-content">
                @foreach (var card in GetFilteredCards(status))
                {
                    <div class="kanban-card priority-@card.Priority">
                        @if (showPriority)
                        {
                            <div class="card-priority">
                                <span class="priority-indicator priority-@card.Priority"></span>
                            </div>
                        }
                        <div class="card-header-content">
                            <h4 class="card-title">@card.Title</h4>
                            <Icon Name="more_vert" Size="18px" Class="card-menu" />
                        </div>
                        @if (!string.IsNullOrEmpty(card.Description))
                        {
                            <p class="card-description">@card.Description</p>
                        }
                        <div class="card-footer">
                            @if (showTags && card.Tags.Any())
                            {
                                <div class="card-tags">
                                    @foreach (var tag in card.Tags.Take(2))
                                    {
                                        <span class="tag">@tag</span>
                                    }
                                    @if (card.Tags.Count > 2)
                                    {
                                        <span class="tag">+@(card.Tags.Count - 2)</span>
                                    }
                                </div>
                            }
                            <div class="card-meta">
                                @if (showDueDate && card.DueDate.HasValue)
                                {
                                    <span class="due-date @(card.DueDate.Value < DateTime.Now ? "overdue" : "")">
                                        <Icon Name="schedule" Size="14px" />
                                        @card.DueDate.Value.ToString("MMM dd")
                                    </span>
                                }
                                @if (showAssignee && !string.IsNullOrEmpty(card.AssignedTo))
                                {
                                    <span class="assignee">@(card.AssignedTo.Length >= 2 ? card.AssignedTo.Substring(0, 2).ToUpper() : card.AssignedTo.ToUpper())</span>
                                }
                            </div>
                        </div>
                    </div>
                }
    <Breadcrumb Items="@breadcrumbItems" />
    <div class="header-content">
        <div>
            <h1>Kanban Board</h1>
            <p>Manage your tasks with a visual workflow</p>
        </div>
        <Button Text="New Task" Icon="add" OnClick="@(() => {})" />
    </div>
</div>

<div class="kanban-board">
    @foreach (var column in columns)
    {
        <div class="kanban-column" 
             @ondrop="@(() => HandleDrop(column.Id))"
             @ondragover:preventDefault
             @ondragover="@(() => HandleDragOver(column.Id))">
            <div class="column-header">
                <div class="column-title">
                    <Icon Name="@column.Icon" Size="20px" />
                    <h3>@column.Title</h3>
                    <span class="task-count">@column.Tasks.Count</span>
                </div>
                <Icon Name="more_vert" Size="20px" Class="column-menu" />
            </div>
            <div class="column-content">
                @foreach (var task in column.Tasks)
                {
                    <div class="task-card" 
                         draggable="true"
                         @ondragstart="@(() => HandleDragStart(task.Id, column.Id))"
                         @ondragend="HandleDragEnd">
                        <div class="task-header">
                            <span class="task-id">@task.Id</span>
                            <span class="priority-indicator priority-@task.Priority"></span>
                        </div>
                        <h4 class="task-title">@task.Title</h4>
                        <p class="task-description">@task.Description</p>
                        
                        @if (task.Tags.Any())
                        {
                            <div class="task-tags">
                                @foreach (var tag in task.Tags)
                                {
                                    <span class="task-tag tag-@tag">@tag</span>
                                }
                            </div>
                        }
                        
                        <div class="task-footer">
                            <div class="task-meta">
                                @if (!string.IsNullOrEmpty(task.Assignee))
                                {
                                    <div class="assignee-avatar" title="@task.Assignee">
                                        @GetInitials(task.Assignee)
                                    </div>
                                }
                                @if (task.Comments > 0)
                                {
                                    <div class="meta-item">
                                        <Icon Name="comment" Size="14px" />
                                        <span>@task.Comments</span>
                                    </div>
                                }
                                @if (task.Attachments > 0)
                                {
                                    <div class="meta-item">
                                        <Icon Name="attachment" Size="14px" />
                                        <span>@task.Attachments</span>
                                    </div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(task.DueDate))
                            {
                                <div class="task-due-date">
                                    <Icon Name="event" Size="14px" />
                                    <span>@task.DueDate</span>
                                </div>
                            }
                        </div>
                    </div>
                }
                @if (!column.Tasks.Any())
                {
                    <div class="empty-column">
                        <Icon Name="inbox" Size="48px" />
                        <p>No tasks</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool showSettings = false;
    private List<KanbanCard> cards = new();
    
    private List<string> statuses = new() { "Backlog", "Todo", "In Progress", "Review", "Done" };
    private List<string> visibleColumns = new() { "Backlog", "Todo", "In Progress", "Review", "Done" };
    
    private List<string> themes = new() { "Default", "Ocean", "Sunset", "Forest" };
    private string selectedTheme = "Default";
    
    private List<string> densities = new() { "Compact", "Comfortable", "Spacious" };
    private string selectedDensity = "Comfortable";
    
    private List<string> sortOptions = new() { "Created Date", "Due Date", "Priority", "Title" };
    private string selectedSort = "Created Date";
    
    private bool showAssignee = true;
    private bool showDueDate = true;
    private bool showTags = true;
    private bool showPriority = true;

    // Constants for sample data generation
    private const int MaxDaysInPast = 30;
    private const int DueDateThreshold = 10;
    private const int DueDateMinDays = -5;
    private const int DueDateMaxDays = 15;
    private const int DueDateThresholdValue = 3;

    protected override void OnInitialized()
    {
        // Generate sample cards
        var random = new Random(42);
        var titles = new[] {
            "Update user authentication", "Fix login bug", "Add dark mode support",
            "Refactor API endpoints", "Write documentation", "Setup CI/CD pipeline",
            "Design new landing page", "Implement search feature", "Optimize database queries",
            "Add unit tests", "Review pull requests", "Update dependencies",
            "Create mobile mockups", "Setup analytics", "Improve accessibility"
        };
        
        var descriptions = new[] {
            "Need to implement OAuth 2.0 for better security",
            "Users are experiencing issues with password reset",
            "Add theme toggle and persist user preference",
            "Consolidate duplicate endpoints and improve naming",
            "Update README with latest changes and examples"
        };
        
        var tags = new[] { "frontend", "backend", "bug", "feature", "docs", "ui/ux", "security", "performance" };
        var assignees = new[] { "JD", "AS", "MK", "LB", "TW", "RA" };
        
        for (int i = 0; i < 15; i++)
        {
            var statusIndex = random.Next(statuses.Count);
            var priorityIndex = random.Next(3);
            var priority = priorityIndex switch { 0 => "low", 1 => "medium", _ => "high" };
            
            var cardTags = new List<string>();
            var tagCount = random.Next(0, 4);
            for (int j = 0; j < tagCount; j++)
            {
                var tag = tags[random.Next(tags.Length)];
                if (!cardTags.Contains(tag))
                    cardTags.Add(tag);
            }
            
            cards.Add(new KanbanCard
            {
                Id = i + 1,
                Title = titles[i],
                Description = i < descriptions.Length ? descriptions[i] : "",
                Status = statuses[statusIndex],
                Priority = priority,
                AssignedTo = assignees[random.Next(assignees.Length)],
                CreatedDate = DateTime.Now.AddDays(-random.Next(MaxDaysInPast)),
                DueDate = random.Next(DueDateThreshold) > DueDateThresholdValue 
                    ? DateTime.Now.AddDays(random.Next(DueDateMinDays, DueDateMaxDays)) 
                    : null,
                Tags = cardTags
            });
        }
    }

    private void ToggleSettings()
    {
        showSettings = !showSettings;
    }

    private void ToggleColumn(string status, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            if (!visibleColumns.Contains(status))
                visibleColumns.Add(status);
        }
        else
        {
            visibleColumns.Remove(status);
        }
    }

    private void ChangeTheme(string theme)
    {
        selectedTheme = theme;
    }

    private void ChangeDensity(string density)
    {
        selectedDensity = density;
    }

    private void ChangeSort(string sort)
    {
        selectedSort = sort;
    }

    private IEnumerable<KanbanCard> GetFilteredCards(string status)
    {
        var filtered = cards.Where(c => c.Status == status);
        
        return selectedSort switch
        {
            "Due Date" => filtered.OrderBy(c => c.DueDate ?? DateTime.MaxValue),
            "Priority" => filtered.OrderByDescending(c => c.Priority == "high" ? 3 : c.Priority == "medium" ? 2 : 1),
            "Title" => filtered.OrderBy(c => c.Title),
            _ => filtered.OrderBy(c => c.CreatedDate)
        };
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "Backlog" => "inbox",
            "Todo" => "radio_button_unchecked",
            "In Progress" => "schedule",
            "Review" => "rate_review",
            "Done" => "check_circle",
            _ => "circle"
        };
    private List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel> breadcrumbItems = new();
    private List<KanbanColumn> columns = new();
    private string? draggedTaskId;
    private string? draggedFromColumnId;
    private string? dragOverColumnId;

    protected override void OnInitialized()
    {
        breadcrumbItems = new List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel>
        {
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Home") { Url = "/" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Kanban") { Url = "/kanban" }
        };

        InitializeBoard();
    }

    private void InitializeBoard()
    {
        columns = new List<KanbanColumn>
        {
            new KanbanColumn
            {
                Id = "backlog",
                Title = "Backlog",
                Icon = "inventory_2",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "TASK-001",
                        Title = "Design new landing page",
                        Description = "Create modern landing page design with hero section",
                        Priority = "high",
                        Tags = new List<string> { "design", "ui" },
                        Assignee = "Sarah Johnson",
                        Comments = 3,
                        Attachments = 2,
                        DueDate = "Dec 15"
                    },
                    new KanbanTask
                    {
                        Id = "TASK-002",
                        Title = "Update user documentation",
                        Description = "Add new features to the user guide",
                        Priority = "low",
                        Tags = new List<string> { "docs" },
                        Assignee = "Mike Chen",
                        Comments = 1,
                        Attachments = 0,
                        DueDate = "Dec 20"
                    }
                }
            },
            new KanbanColumn
            {
                Id = "todo",
                Title = "To Do",
                Icon = "radio_button_unchecked",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "TASK-003",
                        Title = "Implement authentication",
                        Description = "Add OAuth2 support for Google and GitHub",
                        Priority = "high",
                        Tags = new List<string> { "backend", "security" },
                        Assignee = "John Doe",
                        Comments = 5,
                        Attachments = 1,
                        DueDate = "Dec 10"
                    },
                    new KanbanTask
                    {
                        Id = "TASK-004",
                        Title = "Database optimization",
                        Description = "Optimize slow queries and add indexes",
                        Priority = "medium",
                        Tags = new List<string> { "backend", "performance" },
                        Assignee = "Emily Davis",
                        Comments = 2,
                        Attachments = 0,
                        DueDate = "Dec 12"
                    }
                }
            },
            new KanbanColumn
            {
                Id = "in-progress",
                Title = "In Progress",
                Icon = "schedule",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "TASK-005",
                        Title = "Build Kanban board UI",
                        Description = "Create interactive Kanban board with drag and drop",
                        Priority = "high",
                        Tags = new List<string> { "frontend", "ui" },
                        Assignee = "Alex Turner",
                        Comments = 8,
                        Attachments = 3,
                        DueDate = "Dec 8"
                    },
                    new KanbanTask
                    {
                        Id = "TASK-006",
                        Title = "API integration",
                        Description = "Connect frontend with REST API endpoints",
                        Priority = "medium",
                        Tags = new List<string> { "frontend", "backend" },
                        Assignee = "Lisa Wang",
                        Comments = 4,
                        Attachments = 1,
                        DueDate = "Dec 11"
                    }
                }
            },
            new KanbanColumn
            {
                Id = "review",
                Title = "Review",
                Icon = "rate_review",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "TASK-007",
                        Title = "Mobile responsive design",
                        Description = "Ensure all pages work on mobile devices",
                        Priority = "medium",
                        Tags = new List<string> { "frontend", "mobile" },
                        Assignee = "David Brown",
                        Comments = 6,
                        Attachments = 2,
                        DueDate = "Dec 9"
                    }
                }
            },
            new KanbanColumn
            {
                Id = "done",
                Title = "Done",
                Icon = "check_circle",
                Tasks = new List<KanbanTask>
                {
                    new KanbanTask
                    {
                        Id = "TASK-008",
                        Title = "Setup CI/CD pipeline",
                        Description = "Configure GitHub Actions for automated deployment",
                        Priority = "high",
                        Tags = new List<string> { "devops" },
                        Assignee = "Tom Wilson",
                        Comments = 12,
                        Attachments = 5,
                        DueDate = "Dec 5"
                    },
                    new KanbanTask
                    {
                        Id = "TASK-009",
                        Title = "Initial project setup",
                        Description = "Setup project structure and dependencies",
                        Priority = "high",
                        Tags = new List<string> { "setup" },
                        Assignee = "Sarah Johnson",
                        Comments = 3,
                        Attachments = 1,
                        DueDate = "Dec 1"
                    }
                }
            }
        };
    }

    private void HandleDragStart(string taskId, string columnId)
    {
        draggedTaskId = taskId;
        draggedFromColumnId = columnId;
    }

    private void HandleDragOver(string columnId)
    {
        dragOverColumnId = columnId;
    }

    private void HandleDragEnd()
    {
        dragOverColumnId = null;
    }

    private void HandleDrop(string targetColumnId)
    {
        if (draggedTaskId != null && draggedFromColumnId != null && draggedFromColumnId != targetColumnId)
        {
            var sourceColumn = columns.FirstOrDefault(c => c.Id == draggedFromColumnId);
            var targetColumn = columns.FirstOrDefault(c => c.Id == targetColumnId);

            if (sourceColumn != null && targetColumn != null)
            {
                var task = sourceColumn.Tasks.FirstOrDefault(t => t.Id == draggedTaskId);
                if (task != null)
                {
                    sourceColumn.Tasks.Remove(task);
                    targetColumn.Tasks.Add(task);
                    StateHasChanged();
                }
            }
        }

        draggedTaskId = null;
        draggedFromColumnId = null;
        dragOverColumnId = null;
    }

    private string GetInitials(string name)
    {
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return parts.Length > 0 ? parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper() : "";
    }

    public class KanbanColumn
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Icon { get; set; } = "";
        public List<KanbanTask> Tasks { get; set; } = new();
    }

    public class KanbanTask
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Priority { get; set; } = "medium";
        public List<string> Tags { get; set; } = new();
        public string Assignee { get; set; } = "";
        public int Comments { get; set; }
        public int Attachments { get; set; }
        public string DueDate { get; set; } = "";
    }
}

<style>
    .page-header {
        margin-bottom: 1.5rem;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: #1e293b;
    }

    .page-header p {
        color: #64748b;
        margin: 0;
    }

    .settings-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .settings-header h3 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #1e293b;
    }

    .settings-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .setting-group {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .setting-label {
        font-weight: 600;
        font-size: 0.875rem;
        color: #1e293b;
    }

    .checkbox-group, .radio-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .checkbox-label, .radio-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        font-size: 0.875rem;
        color: #475569;
    }

    .checkbox-label:hover, .radio-label:hover {
        color: #1e293b;
    }

    .checkbox-label input, .radio-label input {
        cursor: pointer;
        width: 16px;
        height: 16px;
    }

    .kanban-board {
        display: flex;
        gap: 1.5rem;
        overflow-x: auto;
        padding-bottom: 1rem;
    }

    .kanban-column {
        min-width: 320px;
        max-width: 380px;
        flex: 1;
        display: flex;
        flex-direction: column;
        background: #f8fafc;
        border-radius: 0.5rem;
        padding: 1rem;
    .kanban-board {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 1.5rem;
        padding-bottom: 2rem;
        overflow-x: auto;
    }

    .kanban-column {
        background: #f8fafc;
        border-radius: 0.75rem;
        padding: 1rem;
        min-height: 500px;
        transition: background-color 0.2s;
    }

    .kanban-column:hover {
        background: #f1f5f9;
    }

    .column-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding: 0.5rem;
    }

    .column-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .column-title h3 {
        margin: 0;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        color: #64748b;
    }

    .card-count {
        font-size: 1rem;
        font-weight: 600;
        color: #1e293b;
    }

    .task-count {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 1.5rem;
        height: 1.5rem;
        padding: 0 0.375rem;
        background: #cbd5e1;
        color: #475569;
        padding: 0 0.5rem;
        background: #e2e8f0;
        color: #64748b;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .column-menu {
        cursor: pointer;
        color: #94a3b8;
        transition: color 0.2s;
    }

    .column-menu:hover {
        color: #64748b;
    }

    .column-content {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        min-height: 100px;
    }

    .kanban-card {
    }

    .task-card {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .kanban-card:hover {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        transform: translateY(-2px);
    }

    .card-priority {
        margin-bottom: 0.5rem;
    }

    .priority-indicator {
        display: inline-block;
        width: 100%;
        height: 3px;
        border-radius: 2px;
        cursor: grab;
        transition: all 0.2s;
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    }

    .task-card:hover {
        border-color: #cbd5e1;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }

    .task-card:active {
        cursor: grabbing;
        opacity: 0.8;
    }

    .task-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .task-id {
        font-family: monospace;
        font-size: 0.75rem;
        color: #64748b;
        font-weight: 600;
    }

    .priority-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
    }

    .priority-indicator.priority-high {
        background: #ef4444;
    }

    .priority-indicator.priority-medium {
        background: #f59e0b;
    }

    .priority-indicator.priority-low {
        background: #10b981;
    }

    .card-header-content {
        display: flex;
        justify-content: space-between;
        align-items: start;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .card-title {
        margin: 0;
        font-size: 0.875rem;
        font-weight: 600;
        color: #1e293b;
        line-height: 1.4;
    }

    .card-menu {
        color: #94a3b8;
        cursor: pointer;
        flex-shrink: 0;
    }

    .card-menu:hover {
        color: #64748b;
    }

    .card-description {
        margin: 0 0 0.75rem 0;
        font-size: 0.8125rem;
        color: #64748b;
        line-height: 1.5;
    }

    .card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 0.5rem;
    }

    .card-tags {
        display: flex;
        gap: 0.375rem;
        flex-wrap: wrap;
    }

    .tag {
        display: inline-block;
        padding: 0.125rem 0.5rem;
        background: #f1f5f9;
        color: #475569;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .card-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-left: auto;
    }

    .due-date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.75rem;
        color: #64748b;
    }

    .due-date.overdue {
        color: #ef4444;
    }

    .assignee {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 1.75rem;
        height: 1.75rem;
        background: #6366f1;
        color: white;
        border-radius: 9999px;
        font-size: 0.625rem;
        font-weight: 600;
    }

    /* Theme variations */
    .theme-Ocean .kanban-column {
        background: #e0f2fe;
    }

    .theme-Ocean .column-title h3 {
        color: #0369a1;
    }

    .theme-Sunset .kanban-column {
        background: #fef3c7;
    }

    .theme-Sunset .column-title h3 {
        color: #92400e;
    }

    .theme-Forest .kanban-column {
        background: #dcfce7;
    }

    .theme-Forest .column-title h3 {
        color: #166534;
    }

    /* Density variations */
    .density-Compact .kanban-card {
        padding: 0.75rem;
    }

    .density-Compact .card-title {
        font-size: 0.8125rem;
    }

    .density-Compact .card-description {
        font-size: 0.75rem;
    }

    .density-Spacious .kanban-card {
        padding: 1.25rem;
    }

    .density-Spacious .card-title {
        font-size: 1rem;
    }

    .density-Spacious .column-content {
        gap: 1rem;
        background: #3b82f6;
    }

    .task-title {
        font-size: 0.95rem;
        font-weight: 600;
        color: #1e293b;
        margin: 0 0 0.5rem 0;
        line-height: 1.4;
    }

    .task-description {
        font-size: 0.875rem;
        color: #64748b;
        margin: 0 0 0.75rem 0;
        line-height: 1.5;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .task-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.375rem;
        margin-bottom: 0.75rem;
    }

    .task-tag {
        display: inline-block;
        padding: 0.125rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.7rem;
        font-weight: 500;
        text-transform: lowercase;
    }

    .task-tag.tag-design {
        background: #fce7f3;
        color: #be185d;
    }

    .task-tag.tag-ui {
        background: #e0e7ff;
        color: #4338ca;
    }

    .task-tag.tag-backend {
        background: #dbeafe;
        color: #1e40af;
    }

    .task-tag.tag-frontend {
        background: #ddd6fe;
        color: #6d28d9;
    }

    .task-tag.tag-security {
        background: #fee2e2;
        color: #991b1b;
    }

    .task-tag.tag-performance {
        background: #fef3c7;
        color: #92400e;
    }

    .task-tag.tag-docs {
        background: #f1f5f9;
        color: #475569;
    }

    .task-tag.tag-mobile {
        background: #dcfce7;
        color: #166534;
    }

    .task-tag.tag-devops {
        background: #fef08a;
        color: #854d0e;
    }

    .task-tag.tag-setup {
        background: #e5e7eb;
        color: #374151;
    }

    .task-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 0.75rem;
        padding-top: 0.75rem;
        border-top: 1px solid #f1f5f9;
    }

    .task-meta {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .assignee-avatar {
        width: 1.75rem;
        height: 1.75rem;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.65rem;
        font-weight: 600;
        cursor: pointer;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        color: #64748b;
        font-size: 0.75rem;
    }

    .meta-item span {
        font-weight: 500;
    }

    .task-due-date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        color: #64748b;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .empty-column {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem 1rem;
        color: #cbd5e1;
        text-align: center;
    }

    .empty-column p {
        margin: 0.5rem 0 0 0;
        font-size: 0.875rem;
        color: #94a3b8;
    }

    /* Responsive adjustments */
    @@media (max-width: 1400px) {
        .kanban-board {
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .kanban-board {
            grid-template-columns: 1fr;
        }

        .page-header h1 {
            font-size: 1.5rem;
        }
    }
</style>
