@page "/database-schema"
@rendermode InteractiveServer

<PageTitle>Database Schema Designer - Blazor UI</PageTitle>

<div class="page-header">
    <h1>Database Schema Designer</h1>
    <p>Design and visualize your database structure</p>
</div>

<div class="schema-designer">
    <div class="toolbar">
        <Button Text="Add Table" Icon="add_box" OnClick="AddTable" />
        <Button Text="Clear All" Icon="delete_sweep" Type="ButtonType.Destructive" OnClick="ClearSchema" />
        <div class="toolbar-spacer"></div>
        <Button Text="Export SQL" Icon="code" Type="ButtonType.Secondary" OnClick="ExportSQL" />
        <Button Text="Save Schema" Icon="save" Type="ButtonType.Primary" OnClick="SaveSchema" />
    </div>

    <div class="canvas-wrapper">
        <div class="canvas" @ref="canvasElement">
            @foreach (var table in tables)
            {
                <div class="db-table" style="left: @(table.X)px; top: @(table.Y)px;">
                    <div class="table-header">
                        <Icon Name="table_chart" Size="18px" />
                        <span class="table-name">@table.Name</span>
                        <Icon Name="close" Size="16px" Class="table-close" OnClick="@(() => RemoveTable(table))" />
                    </div>
                    <div class="table-fields">
                        @foreach (var field in table.Fields)
                        {
                            <div class="table-field">
                                <div class="field-info">
                                    @if (field.IsPrimaryKey)
                                    {
                                        <Icon Name="key" Size="14px" Class="field-icon key-icon" />
                                    }
                                    else if (field.IsForeignKey)
                                    {
                                        <Icon Name="link" Size="14px" Class="field-icon fk-icon" />
                                    }
                                    else
                                    {
                                        <Icon Name="database" Size="14px" Class="field-icon" />
                                    }
                                    <span class="field-name">@field.Name</span>
                                </div>
                                <span class="field-type">@field.Type</span>
                            </div>
                        }
                    </div>
                    <div class="table-footer">
                        <Button Text="Add Field" Icon="add" Size="ButtonSize.Small" OnClick="@(() => AddField(table))" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private const int InitialTableX = 50;
    private const int InitialTableY = 50;
    private const int TableOffsetIncrement = 30;
    
    private ElementReference canvasElement;
    private List<DatabaseTable> tables = new();
    private int tableCounter = 1;
    private int fieldCounter = 1;

    protected override void OnInitialized()
    {
        // Initialize with sample tables
        tables.Add(new DatabaseTable
        {
            Name = "Users",
            X = InitialTableX,
            Y = InitialTableY,
            Fields = new List<DatabaseField>
            {
                new DatabaseField { Name = "id", Type = "INT", IsPrimaryKey = true },
                new DatabaseField { Name = "username", Type = "VARCHAR(50)" },
                new DatabaseField { Name = "email", Type = "VARCHAR(100)" },
                new DatabaseField { Name = "created_at", Type = "TIMESTAMP" }
            }
        });

        tables.Add(new DatabaseTable
        {
            Name = "Posts",
            X = 400,
            Y = 50,
            Fields = new List<DatabaseField>
            {
                new DatabaseField { Name = "id", Type = "INT", IsPrimaryKey = true },
                new DatabaseField { Name = "user_id", Type = "INT", IsForeignKey = true },
                new DatabaseField { Name = "title", Type = "VARCHAR(200)" },
                new DatabaseField { Name = "content", Type = "TEXT" },
                new DatabaseField { Name = "published_at", Type = "TIMESTAMP" }
            }
        });

        tables.Add(new DatabaseTable
        {
            Name = "Comments",
            X = 750,
            Y = 50,
            Fields = new List<DatabaseField>
            {
                new DatabaseField { Name = "id", Type = "INT", IsPrimaryKey = true },
                new DatabaseField { Name = "post_id", Type = "INT", IsForeignKey = true },
                new DatabaseField { Name = "user_id", Type = "INT", IsForeignKey = true },
                new DatabaseField { Name = "comment", Type = "TEXT" },
                new DatabaseField { Name = "created_at", Type = "TIMESTAMP" }
            }
        });

        tables.Add(new DatabaseTable
        {
            Name = "Categories",
            X = 400,
            Y = 350,
            Fields = new List<DatabaseField>
            {
                new DatabaseField { Name = "id", Type = "INT", IsPrimaryKey = true },
                new DatabaseField { Name = "name", Type = "VARCHAR(100)" },
                new DatabaseField { Name = "description", Type = "TEXT" }
            }
        });
    }

    private void AddTable()
    {
        tables.Add(new DatabaseTable
        {
            Name = $"NewTable{tableCounter++}",
            X = InitialTableX + (tables.Count * TableOffsetIncrement),
            Y = InitialTableY + (tables.Count * TableOffsetIncrement),
            Fields = new List<DatabaseField>
            {
                new DatabaseField { Name = "id", Type = "INT", IsPrimaryKey = true }
            }
        });
    }

    private void RemoveTable(DatabaseTable table)
    {
        tables.Remove(table);
    }

    private void AddField(DatabaseTable table)
    {
        table.Fields.Add(new DatabaseField
        {
            Name = $"field{fieldCounter++}",
            Type = "VARCHAR(50)"
        });
    }

    private void ClearSchema()
    {
        tables.Clear();
        tableCounter = 1;
        fieldCounter = 1;
    }

    private void ExportSQL()
    {
        // TODO: Implement SQL export functionality
        // This would generate CREATE TABLE statements from the schema
    }

    private void SaveSchema()
    {
        // TODO: Implement schema save functionality
        // This would save the schema to local storage or database
    }

    private class DatabaseTable
    {
        public string Name { get; set; } = string.Empty;
        public double X { get; set; }
        public double Y { get; set; }
        public List<DatabaseField> Fields { get; set; } = new();
    }

    private class DatabaseField
    {
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public bool IsPrimaryKey { get; set; }
        public bool IsForeignKey { get; set; }
    }
}

<style>
    .page-header {
        margin-bottom: 1rem;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: #1e293b;
    }

    .page-header p {
        color: #64748b;
        margin: 0;
    }

    .schema-designer {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        height: calc(100vh - 200px);
    }

    .toolbar {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        padding: 1rem;
        background: var(--card-background, #ffffff);
        border: 1px solid var(--border-color, #e2e8f0);
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .toolbar-spacer {
        flex: 1;
    }

    .canvas-wrapper {
        flex: 1;
        background: var(--canvas-background, #f8fafc);
        border: 1px solid var(--border-color, #e2e8f0);
        border-radius: 0.5rem;
        overflow: auto;
        position: relative;
    }

    .canvas {
        position: relative;
        min-width: 100%;
        min-height: 100%;
        background-image: 
            linear-gradient(var(--grid-line, #e2e8f0) 1px, transparent 1px),
            linear-gradient(90deg, var(--grid-line, #e2e8f0) 1px, transparent 1px);
        background-size: 20px 20px;
    }

    .db-table {
        position: absolute;
        min-width: 280px;
        background: var(--card-background, #ffffff);
        border: 2px solid var(--border-color, #cbd5e1);
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        cursor: move;
        transition: box-shadow 0.2s;
    }

    .db-table:hover {
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        border-color: var(--primary-color, #3b82f6);
    }

    .table-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 0.375rem 0.375rem 0 0;
        font-weight: 600;
        cursor: move;
    }

    .table-name {
        flex: 1;
        font-size: 1rem;
    }

    .table-close {
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    .table-close:hover {
        opacity: 1;
    }

    .table-fields {
        padding: 0.5rem 0;
    }

    .table-field {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 1rem;
        border-bottom: 1px solid var(--border-color, #f1f5f9);
        font-size: 0.875rem;
    }

    .table-field:last-child {
        border-bottom: none;
    }

    .table-field:hover {
        background: var(--hover-background, #f8fafc);
    }

    .field-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .field-icon {
        color: var(--muted-color, #64748b);
    }

    .field-icon.key-icon {
        color: #f59e0b;
    }

    .field-icon.fk-icon {
        color: #3b82f6;
    }

    .field-name {
        font-weight: 500;
        color: var(--text-color, #1e293b);
    }

    .field-type {
        color: var(--muted-color, #64748b);
        font-size: 0.8125rem;
        font-family: 'Courier New', monospace;
    }

    .table-footer {
        padding: 0.5rem 1rem;
        border-top: 1px solid var(--border-color, #e2e8f0);
        background: var(--footer-background, #f8fafc);
        border-radius: 0 0 0.375rem 0.375rem;
    }

    /* Dark theme support */
    @@media (prefers-color-scheme: dark) {
        .page-header h1 {
            color: #f1f5f9;
        }

        .page-header p {
            color: #94a3b8;
        }

        .canvas-wrapper {
            background: #0f172a;
            border-color: #334155;
        }

        .canvas {
            background-image: 
                linear-gradient(#1e293b 1px, transparent 1px),
                linear-gradient(90deg, #1e293b 1px, transparent 1px);
        }

        .db-table {
            background: #1e293b;
            border-color: #475569;
        }

        .db-table:hover {
            border-color: #667eea;
        }

        .table-field {
            border-bottom-color: #334155;
        }

        .table-field:hover {
            background: #334155;
        }

        .field-name {
            color: #f1f5f9;
        }

        .field-type {
            color: #94a3b8;
        }

        .table-footer {
            border-top-color: #334155;
            background: #334155;
        }
    }
</style>
