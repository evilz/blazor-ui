@page "/database-schema"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Components.DatabaseSchema
@using Blazor.Diagrams.Core.Geometry
@implements IDisposable

<PageTitle>Database Schema Designer - Blazor UI</PageTitle>

<div class="page-header">
    <h1>Database Schema Designer</h1>
    <p>Design and visualize your database structure</p>
</div>

<div class="schema-designer">
    <div class="toolbar">
        <Button Text="Add Table" Icon="add_box" OnClick="AddTable" />
        <Button Text="Delete Selected" Icon="delete" Type="ButtonType.Destructive" OnClick="DeleteSelected" />
        <Button Text="Clear All" Icon="delete_sweep" Type="ButtonType.Destructive" OnClick="ClearSchema" />
        <div class="toolbar-spacer"></div>
        <Button Text="Export SQL" Icon="code" Type="ButtonType.Secondary" OnClick="ExportSQL" />
        <Button Text="Save Schema" Icon="save" Type="ButtonType.Primary" OnClick="SaveSchema" />
    </div>

    <div class="canvas-wrapper">
        <CascadingValue Value="Diagram">
            <DiagramCanvas Class="diagram-canvas"></DiagramCanvas>
        </CascadingValue>
    </div>
</div>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;
    private int tableCounter = 1;

    protected override void OnInitialized()
    {
        Diagram = new BlazorDiagram();
        
        // Configure diagram options
        Diagram.Options.AllowMultiSelection = true;
        Diagram.Options.Zoom.Enabled = true;
        Diagram.Options.Links.DefaultColor = "#3b82f6";
        Diagram.Options.Links.DefaultSelectedColor = "#667eea";
        
        // Enable interactive link creation by dragging between ports
        Diagram.Options.Links.RequireTarget = true;

        // Register the custom node widget
        Diagram.RegisterComponent<TableNode, TableNodeWidget>();
        
        // Subscribe to keyboard events for Delete key
        Diagram.KeyDown += OnKeyDown;

        // Initialize with sample tables
        var usersTable = new TableNode(new Point(50, 50))
        {
            TableName = "Users"
        };
        usersTable.AddField(new TableField("id", "Integer", true));
        usersTable.AddField(new TableField("username", "VarChar"));
        usersTable.AddField(new TableField("email", "VarChar"));
        usersTable.AddField(new TableField("created_at", "DateTime"));
        Diagram.Nodes.Add(usersTable);

        var postsTable = new TableNode(new Point(400, 50))
        {
            TableName = "Posts"
        };
        postsTable.AddField(new TableField("id", "Integer", true));
        postsTable.AddField(new TableField("user_id", "Integer"));
        postsTable.AddField(new TableField("title", "VarChar"));
        postsTable.AddField(new TableField("content", "VarChar"));
        postsTable.AddField(new TableField("published_at", "DateTime"));
        Diagram.Nodes.Add(postsTable);

        var commentsTable = new TableNode(new Point(750, 50))
        {
            TableName = "Comments"
        };
        commentsTable.AddField(new TableField("id", "Integer", true));
        commentsTable.AddField(new TableField("post_id", "Integer"));
        commentsTable.AddField(new TableField("user_id", "Integer"));
        commentsTable.AddField(new TableField("comment", "VarChar"));
        commentsTable.AddField(new TableField("created_at", "DateTime"));
        Diagram.Nodes.Add(commentsTable);

        var categoriesTable = new TableNode(new Point(400, 350))
        {
            TableName = "Categories"
        };
        categoriesTable.AddField(new TableField("id", "Integer", true));
        categoriesTable.AddField(new TableField("name", "VarChar"));
        categoriesTable.AddField(new TableField("description", "VarChar"));
        Diagram.Nodes.Add(categoriesTable);

        // Add some sample links between tables
        var usersToPosts = Diagram.Links.Add(new LinkModel(usersTable.GetPort(PortAlignment.Right)!, postsTable.GetPort(PortAlignment.Left)!));
        var postsToComments = Diagram.Links.Add(new LinkModel(postsTable.GetPort(PortAlignment.Right)!, commentsTable.GetPort(PortAlignment.Left)!));
        var usersToComments = Diagram.Links.Add(new LinkModel(usersTable.GetPort(PortAlignment.Bottom)!, commentsTable.GetPort(PortAlignment.Top)!));

        tableCounter = 5;
    }

    private void AddTable()
    {
        var newTable = new TableNode(new Point(100 + (tableCounter * 30), 100 + (tableCounter * 30)))
        {
            TableName = $"NewTable{tableCounter++}"
        };
        newTable.AddField(new TableField("id", "Integer", true));
        Diagram.Nodes.Add(newTable);
    }

    private void DeleteSelected()
    {
        // Delete selected links
        var selectedLinks = Diagram.Links.Where(l => l.Selected).ToList();
        foreach (var link in selectedLinks)
        {
            Diagram.Links.Remove(link);
        }

        // Delete selected nodes
        var selectedNodes = Diagram.Nodes.Where(n => n.Selected).ToList();
        foreach (var node in selectedNodes)
        {
            Diagram.Nodes.Remove(node);
        }
    }

    private void ClearSchema()
    {
        Diagram.Nodes.Clear();
        Diagram.Links.Clear();
        tableCounter = 1;
    }

    private void ExportSQL()
    {
        // TODO: Implement SQL export functionality
        // This would generate CREATE TABLE statements from the schema
    }

    private void SaveSchema()
    {
        // TODO: Implement schema save functionality
        // This would save the schema to local storage or database
    }

    private void OnKeyDown(Blazor.Diagrams.Core.Events.KeyboardEventArgs e)
    {
        if (e.Key == "Delete" || e.Key == "Backspace")
        {
            DeleteSelected();
        }
    }

    public void Dispose()
    {
        Diagram.KeyDown -= OnKeyDown;
    }
}

<style>
    .page-header {
        margin-bottom: 1rem;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: #1e293b;
    }

    .page-header p {
        color: #64748b;
        margin: 0;
    }

    .schema-designer {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        height: calc(100vh - 200px);
    }

    .toolbar {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        padding: 1rem;
        background: var(--card-background, #ffffff);
        border: 1px solid var(--border-color, #e2e8f0);
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .toolbar-spacer {
        flex: 1;
    }

    .canvas-wrapper {
        flex: 1;
        background: var(--canvas-background, #f8fafc);
        border: 1px solid var(--border-color, #e2e8f0);
        border-radius: 0.5rem;
        overflow: hidden;
        position: relative;
    }

    .schema-designer :deep(.diagram-canvas) {
        width: 100%;
        height: 100%;
        background-image: 
            linear-gradient(var(--grid-line, #e2e8f0) 1px, transparent 1px),
            linear-gradient(90deg, var(--grid-line, #e2e8f0) 1px, transparent 1px);
        background-size: 20px 20px;
    }

    /* Dark theme support */
    @@media (prefers-color-scheme: dark) {
        .page-header h1 {
            color: #f1f5f9;
        }

        .page-header p {
            color: #94a3b8;
        }

        .canvas-wrapper {
            background: #0f172a;
            border-color: #334155;
        }

        .schema-designer :deep(.diagram-canvas) {
            background: #0f172a;
            background-image: 
                linear-gradient(#1e293b 1px, transparent 1px),
                linear-gradient(90deg, #1e293b 1px, transparent 1px);
        }
    }
</style>

