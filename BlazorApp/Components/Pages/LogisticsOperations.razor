@page "/logistics"
@rendermode InteractiveServer

<PageTitle>Logistics Operations - Blazor UI</PageTitle>

<div class="page-header">
    <Breadcrumb Items="@breadcrumbItems" />
    <h1>Logistics Operations</h1>
    <p>Real-time tracking and fleet management</p>
</div>

<div class="dashboard-grid">
    <Card Style="min-width: 250px;">
        <CardHeader>
            <div class="card-header-content">
                <Icon Name="local_shipping" Size="24px" />
                <h3>Total Shipments</h3>
            </div>
        </CardHeader>
        <CardContent>
            <p class="stat-value">1,247</p>
            <p class="stat-change positive">+12.5% from last week</p>
        </CardContent>
    </Card>

    <Card Style="min-width: 250px;">
        <CardHeader>
            <div class="card-header-content">
                <Icon Name="route" Size="24px" />
                <h3>In Transit</h3>
            </div>
        </CardHeader>
        <CardContent>
            <p class="stat-value">432</p>
            <p class="stat-change neutral">Active deliveries</p>
        </CardContent>
    </Card>

    <Card Style="min-width: 250px;">
        <CardHeader>
            <div class="card-header-content">
                <Icon Name="check_circle" Size="24px" />
                <h3>Delivered Today</h3>
            </div>
        </CardHeader>
        <CardContent>
            <p class="stat-value">156</p>
            <p class="stat-change positive">+8.3% from yesterday</p>
        </CardContent>
    </Card>

    <Card Style="min-width: 250px;">
        <CardHeader>
            <div class="card-header-content">
                <Icon Name="warning" Size="24px" />
                <h3>Delayed</h3>
            </div>
        </CardHeader>
        <CardContent>
            <p class="stat-value">23</p>
            <p class="stat-change negative">-5 from yesterday</p>
        </CardContent>
    </Card>
</div>

<div class="logistics-content">
    <Card>
        <CardHeader>
            <div class="table-header">
                <h3>Active Shipments</h3>
                <Button Text="Track Shipment" Icon="add_location" OnClick="@(() => {})" />
            </div>
        </CardHeader>
        <CardContent>
            <DataTable Items="shipments" TItem="Shipment">
                <DataColumns Context="shipment">
                    <DataTableColumn TItem="Shipment" Header="Tracking ID" Property="x => x.TrackingId" />
                    <DataTableColumn TItem="Shipment" Header="Origin" Property="x => x.Origin" />
                    <DataTableColumn TItem="Shipment" Header="Destination" Property="x => x.Destination" />
                    <DataTableColumn TItem="Shipment" Header="Driver" Property="x => x.Driver" />
                    <DataTableColumn TItem="Shipment" Header="Status">
                        <Template>
                            <span class="status-badge @GetStatusClass(shipment.Status)">@shipment.Status</span>
                        </Template>
                    </DataTableColumn>
                    <DataTableColumn TItem="Shipment" Header="ETA" Property="x => x.ETA" />
                    <DataTableColumn TItem="Shipment" Header="Progress">
                        <Template>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @(shipment.Progress)%"></div>
                            </div>
                            <span class="progress-text">@(shipment.Progress)%</span>
                        </Template>
                    </DataTableColumn>
                </DataColumns>
            </DataTable>
        </CardContent>
    </Card>

    <div class="logistics-grid">
        <Card>
            <CardHeader>
                <h3>Fleet Status</h3>
            </CardHeader>
            <CardContent>
                <div class="fleet-list">
                    @foreach (var vehicle in fleet)
                    {
                        <div class="fleet-item">
                            <div class="fleet-icon">
                                <Icon Name="@vehicle.Icon" Size="24px" />
                            </div>
                            <div class="fleet-info">
                                <p class="fleet-name">@vehicle.Name</p>
                                <p class="fleet-driver">@vehicle.Driver</p>
                            </div>
                            <span class="status-badge @GetStatusClass(vehicle.Status)">@vehicle.Status</span>
                        </div>
                    }
                </div>
            </CardContent>
        </Card>

        <Card>
            <CardHeader>
                <h3>Recent Alerts</h3>
            </CardHeader>
            <CardContent>
                <div class="alert-list">
                    @foreach (var alert in alerts)
                    {
                        <div class="alert-item @GetAlertClass(alert.Type)">
                            <Icon Name="@alert.Icon" Size="20px" />
                            <div class="alert-content">
                                <p class="alert-message">@alert.Message</p>
                                <p class="alert-time">@alert.Time</p>
                            </div>
                        </div>
                    }
                </div>
            </CardContent>
        </Card>
    </div>
</div>

@code {
    private List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel> breadcrumbItems = new();
    private List<Shipment> shipments = new();
    private List<Vehicle> fleet = new();
    private List<Alert> alerts = new();

    protected override void OnInitialized()
    {
        breadcrumbItems = new List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel>
        {
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Home") { Url = "/" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Logistics Operations") { Url = "/logistics" }
        };

        shipments = new List<Shipment>
        {
            new Shipment { TrackingId = "SH-2025-0891", Origin = "New York, NY", Destination = "Los Angeles, CA", Driver = "John Davis", Status = "In Transit", ETA = "2 hours", Progress = 75 },
            new Shipment { TrackingId = "SH-2025-0890", Origin = "Chicago, IL", Destination = "Houston, TX", Driver = "Sarah Wilson", Status = "In Transit", ETA = "4 hours", Progress = 60 },
            new Shipment { TrackingId = "SH-2025-0889", Origin = "Miami, FL", Destination = "Atlanta, GA", Driver = "Mike Brown", Status = "Delivered", ETA = "Completed", Progress = 100 },
            new Shipment { TrackingId = "SH-2025-0888", Origin = "Seattle, WA", Destination = "Portland, OR", Driver = "Emily Chen", Status = "Loading", ETA = "6 hours", Progress = 15 },
            new Shipment { TrackingId = "SH-2025-0887", Origin = "Boston, MA", Destination = "Philadelphia, PA", Driver = "David Miller", Status = "Delayed", ETA = "8 hours", Progress = 40 },
            new Shipment { TrackingId = "SH-2025-0886", Origin = "Denver, CO", Destination = "Phoenix, AZ", Driver = "Lisa Anderson", Status = "In Transit", ETA = "3 hours", Progress = 85 }
        };

        fleet = new List<Vehicle>
        {
            new Vehicle { Name = "Truck #145", Driver = "John Davis", Status = "Active", Icon = "local_shipping" },
            new Vehicle { Name = "Truck #167", Driver = "Sarah Wilson", Status = "Active", Icon = "local_shipping" },
            new Vehicle { Name = "Truck #189", Driver = "Mike Brown", Status = "Idle", Icon = "local_shipping" },
            new Vehicle { Name = "Van #023", Driver = "Emily Chen", Status = "Active", Icon = "airport_shuttle" },
            new Vehicle { Name = "Van #045", Driver = "David Miller", Status = "Maintenance", Icon = "airport_shuttle" },
            new Vehicle { Name = "Truck #201", Driver = "Lisa Anderson", Status = "Active", Icon = "local_shipping" }
        };

        alerts = new List<Alert>
        {
            new Alert { Type = "warning", Icon = "warning", Message = "Shipment SH-2025-0887 experiencing delays due to weather", Time = "5 minutes ago" },
            new Alert { Type = "info", Icon = "info", Message = "Truck #167 completed delivery ahead of schedule", Time = "15 minutes ago" },
            new Alert { Type = "success", Icon = "check_circle", Message = "Route optimization saved 2 hours on delivery SH-2025-0891", Time = "1 hour ago" },
            new Alert { Type = "warning", Icon = "error", Message = "Van #045 scheduled for maintenance today", Time = "2 hours ago" }
        };
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "delivered" => "success",
            "in transit" => "info",
            "active" => "info",
            "loading" => "warning",
            "delayed" => "danger",
            "idle" => "neutral",
            "maintenance" => "warning",
            _ => ""
        };
    }

    private string GetAlertClass(string type)
    {
        return $"alert-{type}";
    }

    public class Shipment
    {
        public string TrackingId { get; set; } = "";
        public string Origin { get; set; } = "";
        public string Destination { get; set; } = "";
        public string Driver { get; set; } = "";
        public string Status { get; set; } = "";
        public string ETA { get; set; } = "";
        public int Progress { get; set; }
    }

    public class Vehicle
    {
        public string Name { get; set; } = "";
        public string Driver { get; set; } = "";
        public string Status { get; set; } = "";
        public string Icon { get; set; } = "";
    }

    public class Alert
    {
        public string Type { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Message { get; set; } = "";
        public string Time { get; set; } = "";
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: #1e293b;
    }

    .page-header p {
        color: #64748b;
        margin: 0;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .card-header-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        width: 100%;
    }

    .card-header-content h3 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        color: #1e293b;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1e293b;
        margin: 0 0 0.5rem 0;
    }

    .stat-change {
        font-size: 0.875rem;
        margin: 0;
    }

    .stat-change.positive {
        color: #16a34a;
    }

    .stat-change.negative {
        color: #dc2626;
    }

    .stat-change.neutral {
        color: #64748b;
    }

    .logistics-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .logistics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

    .table-header h3 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #1e293b;
    }

    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: capitalize;
    }

    .status-badge.success {
        background: #dcfce7;
        color: #166534;
    }

    .status-badge.warning {
        background: #fef3c7;
        color: #92400e;
    }

    .status-badge.info {
        background: #dbeafe;
        color: #1e40af;
    }

    .status-badge.danger {
        background: #fee2e2;
        color: #991b1b;
    }

    .status-badge.neutral {
        background: #f1f5f9;
        color: #475569;
    }

    .progress-bar {
        height: 8px;
        background: #e2e8f0;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.25rem;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
        transition: width 0.3s ease;
    }

    .progress-text {
        font-size: 0.75rem;
        color: #64748b;
    }

    .fleet-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .fleet-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 0.5rem;
        transition: background 0.2s;
    }

    .fleet-item:hover {
        background: #f1f5f9;
    }

    .fleet-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        background: white;
        border-radius: 0.5rem;
        color: #475569;
    }

    .fleet-info {
        flex: 1;
    }

    .fleet-name {
        font-weight: 600;
        color: #1e293b;
        margin: 0 0 0.25rem 0;
    }

    .fleet-driver {
        font-size: 0.875rem;
        color: #64748b;
        margin: 0;
    }

    .alert-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .alert-item {
        display: flex;
        gap: 0.75rem;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid;
    }

    .alert-item.alert-warning {
        background: #fef3c7;
        border-color: #f59e0b;
    }

    .alert-item.alert-info {
        background: #dbeafe;
        border-color: #3b82f6;
    }

    .alert-item.alert-success {
        background: #dcfce7;
        border-color: #16a34a;
    }

    .alert-content {
        flex: 1;
    }

    .alert-message {
        font-size: 0.875rem;
        color: #1e293b;
        margin: 0 0 0.25rem 0;
    }

    .alert-time {
        font-size: 0.75rem;
        color: #64748b;
        margin: 0;
    }

    @@media (max-width: 768px) {
        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .logistics-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
