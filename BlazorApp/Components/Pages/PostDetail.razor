@page "/posts/{PostId:int}"
@rendermode InteractiveServer
@using BlazorApp.Models
@using BlazorApp.Services
@inject IJsonPlaceholderService JsonPlaceholderService
@inject NavigationManager Navigation

<PageTitle>@(post?.Title ?? "Post") - Blazor UI</PageTitle>

<div class="mx-auto max-w-4xl p-4 md:p-6">
    <!-- Header -->
    <div class="mb-6 flex flex-col justify-between gap-4 sm:flex-row sm:items-center md:mb-8">
        <div>
            <Breadcrumb Items="@breadcrumbItems" />
            <h1 class="text-foreground text-xl font-semibold md:text-2xl">Post Details</h1>
        </div>
        <div class="flex items-center gap-3 md:gap-4">
            <Button Icon="arrow_back" Type="ButtonType.Ghost" Size="ButtonSize.Small" Tooltip="Back to posts" OnClick="NavigateBack" />
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading">Loading post...</div>
    }
    else if (post == null)
    {
        <Card>
            <CardContent>
                <p>Post not found.</p>
            </CardContent>
        </Card>
    }
    else
    {
        <!-- Activity Timeline -->
        <div class="space-y-4 md:space-y-6">
            <!-- Post Header -->
            <div class="text-muted-foreground mb-3 text-xs font-medium tracking-wide uppercase md:mb-4 md:text-sm">
                @GetPostDate()
            </div>

            <!-- Original Post -->
            <div class="relative flex gap-2 md:gap-3">
                <!-- Timeline Line -->
                @if (comments.Count > 0)
                {
                    <div class="bg-border absolute top-10 bottom-0 left-3 w-px md:top-12 md:left-4"></div>
                }

                <!-- Avatar -->
                <div class="relative z-10">
                    <Avatar Name="@GetUserInitials(post.UserId)" />
                </div>

                <!-- Content -->
                <div class="min-w-0 flex-1">
                    <div class="flex flex-col gap-1 text-xs sm:flex-row sm:items-center sm:gap-2 md:text-sm">
                        <div class="flex flex-wrap items-center gap-1 sm:gap-2">
                            <span class="text-foreground font-medium">User @post.UserId</span>
                            <span class="text-muted-foreground">created a post</span>
                        </div>
                        <span class="text-muted-foreground text-xs sm:ml-auto md:text-sm">
                            @GetPostTime()
                        </span>
                    </div>

                    <!-- Post Content -->
                    <div class="bg-muted text-muted-foreground mt-2 rounded-lg p-2 text-xs leading-relaxed md:mt-3 md:p-3 md:text-sm">
                        <h2 class="text-foreground font-semibold mb-3 capitalize text-lg">@post.Title</h2>
                        <p class="text-foreground">@post.Body</p>
                    </div>

                    <!-- Post Info -->
                    <div class="mt-2 flex flex-wrap gap-2 items-center">
                        <Badge Text="@($"Post #{post.Id}")" Type="BadgeType.Secondary" />
                        <span class="text-muted-foreground text-xs">@comments.Count comment@(comments.Count != 1 ? "s" : "")</span>
                    </div>
                </div>
            </div>

            <!-- Comments Section -->
            @if (comments.Count > 0)
            {
                @foreach (var comment in comments)
                {
                    <div key="@comment.Id">
                        <!-- Comment Item -->
                        <div class="relative flex gap-2 md:gap-3">
                            <!-- Timeline Line -->
                            @if (comment.Id != comments.Last().Id)
                            {
                                <div class="bg-border absolute top-10 bottom-0 left-3 w-px md:top-12 md:left-4"></div>
                            }

                            <!-- Avatar -->
                            <div class="relative z-10">
                                <Avatar Name="@GetCommentInitials(comment.Email)" />
                            </div>

                            <!-- Content -->
                            <div class="min-w-0 flex-1">
                                <div class="flex flex-col gap-1 text-xs sm:flex-row sm:items-center sm:gap-2 md:text-sm">
                                    <div class="flex flex-wrap items-center gap-1 sm:gap-2">
                                        <span class="text-foreground font-medium capitalize">@comment.Name</span>
                                        <span class="text-muted-foreground">commented</span>
                                    </div>
                                    <span class="text-muted-foreground text-xs sm:ml-auto md:text-sm">
                                        @GetCommentTime(comment.Id)
                                    </span>
                                </div>

                                <!-- Email -->
                                <div class="mt-1">
                                    <span class="text-xs text-blue-600">@comment.Email</span>
                                </div>

                                <!-- Comment Body -->
                                <div class="bg-muted text-muted-foreground mt-2 rounded-lg p-2 text-xs leading-relaxed md:mt-3 md:p-3 md:text-sm">
                                    @comment.Body
                                </div>

                                <!-- Comment Badge -->
                                <div class="mt-2 flex flex-wrap gap-2">
                                    <Badge Text="@($"Comment #{comment.Id}")" Type="BadgeType.Outline" />
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center p-4 text-muted-foreground">
                    <p>No comments yet. Be the first to comment!</p>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int PostId { get; set; }

    private Post? post;
    private List<Comment> comments = new();
    private bool isLoading = true;
    private List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        breadcrumbItems = new List<Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel>
        {
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Home") { Url = "/" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel("Blog") { Url = "/posts" },
            new Sysinfocus.AspNetCore.Components.Breadcrumb.BreadcrumbModel($"Post #{PostId}") { Url = $"/posts/{PostId}" }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await JsonPlaceholderService.GetPostAsync(PostId);
            if (post != null)
            {
                comments = await JsonPlaceholderService.GetPostCommentsAsync(PostId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading post: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/posts");
    }

    private string GetUserInitials(int userId)
    {
        return $"U{userId}";
    }

    private string GetCommentInitials(string email)
    {
        var parts = email.Split('@');
        if (parts.Length > 0 && parts[0].Length >= 2)
        {
            return parts[0].Substring(0, 2).ToUpper();
        }
        return "CM";
    }

    private string GetPostDate()
    {
        return DateTime.Now.AddDays(-1).ToString("dddd, dd MMMM").ToUpper();
    }

    private string GetPostTime()
    {
        return DateTime.Now.AddDays(-1).ToString("hh:mm tt");
    }

    private string GetCommentTime(int commentId)
    {
        // Simulate different times for comments
        var baseTime = DateTime.Now;
        var hoursAgo = commentId % 12;
        var time = baseTime.AddHours(-hoursAgo);
        return time.ToString("hh:mm tt");
    }
}

<style>
    .loading {
        text-align: center;
        padding: 2rem;
        color: var(--muted-foreground, #64748b);
    }

    .text-foreground {
        color: var(--foreground, #1e293b);
    }

    .text-muted-foreground {
        color: var(--muted-foreground, #64748b);
    }

    .bg-muted {
        background-color: var(--muted, #f1f5f9);
    }

    .bg-border {
        background-color: var(--border, #e2e8f0);
    }

    .text-blue-600 {
        color: #2563eb;
    }

    .capitalize {
        text-transform: capitalize;
    }

    .uppercase {
        text-transform: uppercase;
    }

    .text-center {
        text-align: center;
    }
</style>
