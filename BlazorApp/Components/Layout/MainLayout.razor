@inherits LayoutComponentBase
@inject NavigationManager Navigation

<div class="container" @onclick="initialization.HandleMainLayoutClickEvent">
    
    <Sidebar Items="@sideBarItems" Show="@showMenu" IsSimpleSideBar="@isSimple" Height="100%"
             HoverBackground="purple" HoverForeground="white" OnMenuClick="OnMenuClick">
        <SidebarHeader>
            <h4 class="large g8 flex jcc mt1 mb05 pointer" @onclick="GotoHome">
                <Icon Name="home" Size="32px" />
                Blazor UI
            </h4>
        </SidebarHeader>
        <SidebarFooter>
            <small class="muted-color flex jcc mt05 mb05" style="font-size:0.7rem">&copy; 2025, Blazor UI Template.</small>
        </SidebarFooter>
    </Sidebar>
    <div class="flex-col g8 f1">
        <div class="flex jcsb" style="padding: 1.25rem 1rem 0.5rem">
            <div class="flex">
                <Icon Size="20px" Name="apps" Tooltip="Show/Hide Sidebar" OnClick="() => showMenu = !showMenu" />
                <Icon Size="20px" Name="switch" Tooltip="Toggle Sidebar Type" OnClick="() => isSimple = !isSimple" />
            </div>
            <div class="flex g8">
                <Icon Size="20px" Name="@(initialization.CurrentTheme == "light" ? "dark_mode" : "light_mode")" Tooltip="Toggle Theme" OnClick="initialization.ToggleTheme" />
                @* <Button Icon="minimize" Type="ButtonType.Secondary" Size="ButtonSize.Small" Style="padding:8px" Tooltip="Close" OnClick="HandleMinimized" />
                <Button Icon="fullscreen" Type="ButtonType.Secondary" Size="ButtonSize.Small" Style="padding:8px" Tooltip="Close" OnClick="HandleMaximizedRestore" />
                <Button Icon="close" Type="ButtonType.Destructive" Size="ButtonSize.Small" Style="padding:8px" Tooltip="Close" OnClick="HandleClose" /> *@
            </div>
        </div>
        <Separator />
        <div style="padding: 0.25rem 1rem">@Body</div>
    </div>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool showMenu = true;
    private bool isSimple = false;
    private List<SideBarItem> sideBarItems = new();

    protected override void OnInitialized()
    {        
        sideBarItems = new List<SideBarItem>
        {
            new SideBarItem("Main", 2, 0, "Dashboard", "home") { Url = "/" },
            new SideBarItem("Main", 3, 0, "Analytics", "bar_chart") { Url = "/analytics" },
            new SideBarItem("Main", 4, 0, "Orders", "shopping_cart") { Url = "/orders" },
            new SideBarItem("Main", 5, 0, "Products", "inventory_2") { Url = "/products" },
            new SideBarItem("Main", 6, 0, "Customers", "group") { Url = "/customers" },
            new SideBarItem("Main", 7, 0, "Components", "widgets") { Url = "/components" },
            
            new SideBarItem("Examples", 9, 0, "Counter", "add_circle") { Url = "/counter" },
            new SideBarItem("Examples", 10, 0, "Weather", "wb_sunny") { Url = "/weather" },
            new SideBarItem("Examples", 11, 0, "Sidebar Demo", "menu_open") { Url = "/sidebar-demo" },
            new SideBarItem("Examples", 12, 0, "Login", "login") { Url = "/login" },
            
            new SideBarItem("Settings", 13, 0, "Settings", "settings") { Url = "/settings" }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await initialization.InitializeTheme();
    }
    
    private void ToggleSidebar()
    {
        showMenu = !showMenu;
    }

    private void GotoHome()
    {
        Navigation.NavigateTo("/");
    }

    private void OnMenuClick(SideBarItem item)
    {
        if (!string.IsNullOrEmpty(item.Url))
        {
            Navigation.NavigateTo(item.Url);
        }
    }

}
